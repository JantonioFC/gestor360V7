// renderer.js - L√≥gica del frontend e interacci√≥n con la UI

// ========= SISTEMA DE PLANTILLAS =========
const templates = {
    dde: {
        "Log de Mentor": {
            icon: "üéØ",
            content: `# Log de Sesi√≥n del Mentor: {fecha}

## 1. Tema Principal de la Sesi√≥n
> [Describe en una frase el tema principal que discutieron. Ej: "Discutimos la estrategia de instalaci√≥n de Linux y la compatibilidad de los perif√©ricos."]

## 2. Decisiones Clave y Conclusiones
> [Resume en puntos las decisiones o conclusiones m√°s importantes a las que llegaron. Esta es la secci√≥n m√°s cr√≠tica.]
> 
> *   **Decisi√≥n:** 
> *   **Conclusi√≥n:** 
> *   **Acci√≥n:** 

## 3. Extracto Relevante de la Conversaci√≥n (Opcional, pero recomendado)
> [Copia y pega el fragmento m√°s importante de la respuesta del Mentor que llev√≥ a una decisi√≥n clave.]
> 
> **Mentor 360:**
> > "[Extracto clave]"

## 4. Pr√≥ximos Pasos Acordados
> [Lista las acciones que te comprometiste a realizar despu√©s de la sesi√≥n.]
>
> 1.  
> 2.  
> 3.  `
        },
        "Decisi√≥n de Ingenier√≠a": {
            icon: "‚öôÔ∏è",
            content: `# Decisi√≥n de Ingenier√≠a: {titulo}

**Fecha:** {fecha}
**Estado:** En Evaluaci√≥n

## Contexto
> [Describe la situaci√≥n que requiere una decisi√≥n t√©cnica]

## Problema
> [Define claramente el problema o desaf√≠o t√©cnico]

## Opciones Consideradas

### Opci√≥n A: [Nombre]
- **Pros:** 
- **Contras:** 
- **Esfuerzo:** 
- **Riesgo:** 

### Opci√≥n B: [Nombre]
- **Pros:** 
- **Contras:** 
- **Esfuerzo:** 
- **Riesgo:** 

## Decisi√≥n Final
> [Opci√≥n elegida y razones]

## Plan de Implementaci√≥n
1. 
2. 
3. 

## M√©tricas de √âxito
- 
- 
- 

## Revisi√≥n Posterior
**Fecha programada:** 
**Criterios de evaluaci√≥n:** `
        },
        "Autoevaluaci√≥n Semanal": {
            icon: "üîç",
            content: `# Autoevaluaci√≥n Semanal: {fecha}

## Logros de la Semana
> [¬øQu√© completaste exitosamente?]

### T√©cnicos
- 
- 
- 

### Personales/Profesionales
- 
- 
- 

## Desaf√≠os Enfrentados
> [¬øQu√© obst√°culos encontraste y c√≥mo los manejaste?]

- **Desaf√≠o:** 
  **Soluci√≥n aplicada:** 
  **Resultado:** 

## Aprendizajes Clave
> [¬øQu√© aprendiste que antes no sab√≠as?]

1. 
2. 
3. 

## √Åreas de Mejora
> [¬øEn qu√© necesitas enfocar tu desarrollo?]

- **√Årea:** 
  **Plan de acci√≥n:** 
  **Timeline:** 

## Objetivos Pr√≥xima Semana
> [¬øQu√© quieres lograr?]

### Prioridad Alta
1. 
2. 
3. 

### Prioridad Media
1. 
2. 

## Reflexi√≥n Personal
> [¬øC√≥mo te sientes con tu progreso?]

**Estado emocional:** 
**Nivel de energ√≠a:** 
**Motivaci√≥n:** 
**Notas adicionales:** `
        }
    },
    planificacion: {
        "Kanban de Proyecto": {
            icon: "üìã",
            content: `# Proyecto: {titulo}

## Por hacer
- Definir objetivos del proyecto
- Investigar herramientas necesarias
- Crear timeline inicial
- Asignar recursos

## En proceso
- 

## Hecho
- Plantilla de proyecto creada`
        },
        "Planificaci√≥n Semanal": {
            icon: "üìÖ",
            content: `# Planificaci√≥n Semanal: {fecha}

## Visi√≥n de la Semana
> [¬øCu√°l es tu enfoque principal esta semana?]

## Objetivos Prioritarios

### üéØ Meta Principal
> [El objetivo m√°s importante que DEBE completarse]

**Objetivo:** 
**Por qu√© es cr√≠tico:** 
**Entregables:** 
**Timeline:** 

### üöÄ Objetivos Secundarios
1. **Objetivo:** 
   **Timeline:** 
   **Notas:** 

2. **Objetivo:** 
   **Timeline:** 
   **Notas:** 

## Distribuci√≥n Diaria

### Lunes
- [ ] 
- [ ] 

### Martes
- [ ] 
- [ ] 

### Mi√©rcoles
- [ ] 
- [ ] 

### Jueves
- [ ] 
- [ ] 

### Viernes
- [ ] 
- [ ] 

## Tracker de H√°bitos

| H√°bito | L | M | M | J | V | S | D |
|--------|---|---|---|---|---|---|---|
| Ejercicio | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú |
| Lectura | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú |
| Programaci√≥n | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú |
| Meditaci√≥n | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú | ‚¨ú |

## Notas y Reflexiones
> [Espacio para notas importantes]

## Revisi√≥n de Fin de Semana
**Fecha de revisi√≥n:** 
**Logros destacados:** 
**Lecciones aprendidas:** 
**Ajustes para pr√≥xima semana:** `
        },
        "Sprint Planning": {
            icon: "‚ö°",
            content: `# Sprint Planning: {titulo}

**Duraci√≥n:** 2 semanas
**Fecha inicio:** {fecha}
**Fecha fin:** 

## Objetivo del Sprint
> [¬øQu√© valor entregar√° este sprint?]

## Historias Seleccionadas

### Historia 1: [T√≠tulo]
- **Puntos:** 
- **Prioridad:** Alta/Media/Baja
- **Criterios de aceptaci√≥n:**
  - [ ] 
  - [ ] 
  - [ ] 

### Historia 2: [T√≠tulo]
- **Puntos:** 
- **Prioridad:** 
- **Criterios de aceptaci√≥n:**
  - [ ] 
  - [ ] 

## Riesgos Identificados
- **Riesgo:** 
  **Probabilidad:** 
  **Impacto:** 
  **Mitigaci√≥n:** 

## Capacidad del Sprint
- **Puntos disponibles:** 
- **Puntos comprometidos:** 
- **Velocidad hist√≥rica:** 

## Definition of Done
- [ ] C√≥digo escrito y revisado
- [ ] Tests unitarios pasando
- [ ] Documentaci√≥n actualizada
- [ ] Deploy en staging exitoso`
        }
    },
    docs: {
        "Manual de Usuario": {
            icon: "üìñ",
            content: `# Manual de Usuario: {titulo}

## Introducci√≥n
> [Describe brevemente qu√© hace este sistema/herramienta]

## Instalaci√≥n y Configuraci√≥n

### Requisitos Previos
- 
- 
- 

### Pasos de Instalaci√≥n
1. 
2. 
3. 

## Uso B√°sico

### Funcionalidad Principal
> [Explica c√≥mo usar la funci√≥n m√°s importante]

1. 
2. 
3. 

### Funcionalidades Adicionales

#### Funci√≥n A
- **Prop√≥sito:** 
- **C√≥mo usar:** 
- **Ejemplo:** 

#### Funci√≥n B
- **Prop√≥sito:** 
- **C√≥mo usar:** 
- **Ejemplo:** 

## Soluci√≥n de Problemas

### Error Com√∫n 1
**S√≠ntoma:** 
**Causa:** 
**Soluci√≥n:** 

### Error Com√∫n 2
**S√≠ntoma:** 
**Causa:** 
**Soluci√≥n:** 

## FAQ

**P: ¬øPregunta frecuente?**
R: Respuesta detallada

## Contacto y Soporte
- **Documentaci√≥n:** 
- **Soporte t√©cnico:** 
- **Comunidad:** `
        },
        "R√∫brica de Evaluaci√≥n": {
            icon: "üìä",
            content: `# R√∫brica de Evaluaci√≥n: {titulo}

**Fecha:** {fecha}
**Evaluador:** 
**Evaluado:** 

## Criterios de Evaluaci√≥n

### 1. Calidad T√©cnica (25%)

#### Excelente (4 puntos)
- C√≥digo limpio y bien estructurado
- Sigue mejores pr√°cticas
- Documentaci√≥n completa
- Tests comprehensivos

#### Bueno (3 puntos)
- C√≥digo mayormente limpio
- Algunas mejores pr√°cticas aplicadas
- Documentaci√≥n b√°sica
- Tests parciales

#### Satisfactorio (2 puntos)
- C√≥digo funcional pero mejorable
- Pocas mejores pr√°cticas
- Documentaci√≥n m√≠nima
- Tests b√°sicos

#### Necesita Mejora (1 punto)
- C√≥digo dif√≠cil de mantener
- Sin mejores pr√°cticas
- Sin documentaci√≥n
- Sin tests

**Puntuaci√≥n:** ___/4

### 2. Funcionalidad (25%)

#### Excelente (4 puntos)
- Todas las funcionalidades implementadas
- Manejo robusto de errores
- UX excepcional
- Performance optimizada

#### Bueno (3 puntos)
- Funcionalidades principales completas
- Manejo b√°sico de errores
- UX buena
- Performance aceptable

#### Satisfactorio (2 puntos)
- Funcionalidades m√≠nimas viables
- Manejo limitado de errores
- UX b√°sica
- Performance suficiente

#### Necesita Mejora (1 punto)
- Funcionalidades incompletas
- Sin manejo de errores
- UX problem√°tica
- Performance deficiente

**Puntuaci√≥n:** ___/4

### 3. Proceso de Desarrollo (25%)

#### Excelente (4 puntos)
- Metodolog√≠a clara aplicada
- Commits descriptivos frecuentes
- Branching strategy apropiada
- Code reviews realizadas

#### Bueno (3 puntos)
- Metodolog√≠a parcialmente aplicada
- Commits regulares
- Uso b√°sico de branches
- Reviews ocasionales

#### Satisfactorio (2 puntos)
- Proceso m√≠nimo seguido
- Commits espor√°dicos
- Trabajo en main branch
- Sin reviews

#### Necesita Mejora (1 punto)
- Sin proceso definido
- Commits inconsistentes
- Sin control de versiones
- Sin colaboraci√≥n

**Puntuaci√≥n:** ___/4

### 4. Comunicaci√≥n y Documentaci√≥n (25%)

#### Excelente (4 puntos)
- Comunicaci√≥n clara y oportuna
- Documentaci√≥n completa
- Presentaci√≥n profesional
- Feedback constructivo

#### Bueno (3 puntos)
- Comunicaci√≥n regular
- Documentaci√≥n adecuada
- Presentaci√≥n clara
- Feedback √∫til

#### Satisfactorio (2 puntos)
- Comunicaci√≥n b√°sica
- Documentaci√≥n m√≠nima
- Presentaci√≥n simple
- Feedback limitado

#### Necesita Mejora (1 punto)
- Comunicaci√≥n deficiente
- Sin documentaci√≥n
- Presentaci√≥n unclear
- Sin feedback

**Puntuaci√≥n:** ___/4

## Puntuaci√≥n Total
**Total:** ___/16 puntos
**Porcentaje:** ___%

## Escala de Calificaci√≥n
- 90-100%: Excelente
- 80-89%: Bueno
- 70-79%: Satisfactorio
- <70%: Necesita Mejora

## Comentarios y Recomendaciones

### Fortalezas Destacadas
- 
- 
- 

### √Åreas de Mejora
- 
- 
- 

### Pr√≥ximos Pasos Recomendados
1. 
2. 
3. 

## Firma y Fecha
**Evaluador:** ________________ **Fecha:** ______
**Evaluado:** ________________ **Fecha:** ______`
        },
        "Checklist de Calidad": {
            icon: "‚úÖ",
            content: `# Checklist de Calidad: {titulo}

**Fecha:** {fecha}
**Revisor:** 
**Proyecto/M√≥dulo:** 

## üîß C√≥digo y Estructura

### Calidad del C√≥digo
- [ ] El c√≥digo sigue las convenciones de nomenclatura establecidas
- [ ] Funciones y m√©todos tienen un prop√≥sito claro y √∫nico
- [ ] El c√≥digo es legible y est√° bien comentado
- [ ] No hay c√≥digo duplicado innecesario
- [ ] Variables y funciones tienen nombres descriptivos

### Arquitectura
- [ ] La estructura del proyecto es l√≥gica y organizada
- [ ] Separaci√≥n adecuada de responsabilidades
- [ ] Patrones de dise√±o aplicados correctamente
- [ ] Dependencias gestionadas apropiadamente

### Performance
- [ ] No hay bucles infinitos o ineficientes
- [ ] Uso adecuado de memoria
- [ ] Consultas a BD optimizadas (si aplica)
- [ ] Recursos liberados apropiadamente

## üß™ Testing y Validaci√≥n

### Tests Unitarios
- [ ] Cobertura de tests >= 80%
- [ ] Tests para casos edge identificados
- [ ] Tests fallan cuando deben fallar
- [ ] Mocks y stubs utilizados apropiadamente

### Tests de Integraci√≥n
- [ ] Flujos principales testeados
- [ ] APIs externas mockeadas
- [ ] Base de datos en entorno de testing
- [ ] Configuraci√≥n de CI/CD funcionando

### Testing Manual
- [ ] Happy path validado manualmente
- [ ] Casos de error probados
- [ ] UX/UI revisada en diferentes dispositivos
- [ ] Accessibility b√°sica verificada

## üìù Documentaci√≥n

### Documentaci√≥n T√©cnica
- [ ] README.md actualizado con instrucciones claras
- [ ] Comentarios en c√≥digo para l√≥gica compleja
- [ ] API documentada (si aplica)
- [ ] Arquitectura documentada

### Documentaci√≥n de Usuario
- [ ] Manual de usuario disponible
- [ ] Screenshots/videos de demo actualizados
- [ ] FAQ con problemas comunes
- [ ] Informaci√≥n de contacto para soporte

## üîí Seguridad

### Autenticaci√≥n y Autorizaci√≥n
- [ ] Passwords hasheadas correctamente
- [ ] Tokens con expiraci√≥n apropiada
- [ ] Validaci√≥n de permisos en todas las rutas
- [ ] Sesiones gestionadas seguramente

### Validaci√≥n de Datos
- [ ] Input sanitizaci√≥n implementada
- [ ] Validaci√≥n server-side para todos los inputs
- [ ] Protecci√≥n contra inyecci√≥n SQL
- [ ] Validaci√≥n de archivos subidos

### Configuraci√≥n
- [ ] Secrets no hardcodeados en el c√≥digo
- [ ] Variables de entorno configuradas
- [ ] Logs no contienen informaci√≥n sensible
- [ ] HTTPS configurado en producci√≥n

## üöÄ Deployment y DevOps

### Preparaci√≥n para Deploy
- [ ] Build process automatizado
- [ ] Configuraci√≥n de entornos separados (dev/staging/prod)
- [ ] Scripts de migraci√≥n de BD (si aplica)
- [ ] Monitoreo y logging configurado

### Backup y Recovery
- [ ] Estrategia de backup definida
- [ ] Plan de disaster recovery documentado
- [ ] Rollback procedure probado
- [ ] Monitoring de salud del sistema

## üìä Business Logic

### Funcionalidad
- [ ] Todos los requisitos funcionales implementados
- [ ] Edge cases manejados apropiadamente
- [ ] Flujos de error implementados
- [ ] Validaciones de negocio aplicadas

### User Experience
- [ ] Interfaz intuitiva y f√°cil de usar
- [ ] Feedback apropiado al usuario
- [ ] Loading states implementados
- [ ] Mensajes de error √∫tiles y claros

## ‚ú® Puntos Adicionales

### Innovation y Best Practices
- [ ] Uso de patrones modernos
- [ ] Consideraci√≥n de escalabilidad futura
- [ ] Code review process seguido
- [ ] Continuous improvement aplicado

## üìã Resumen de Revisi√≥n

### Estad√≠sticas
- **Total √≠tems:** 
- **√çtems completados:** 
- **Porcentaje completado:** __%
- **√çtems cr√≠ticos pendientes:** 

### Estado General
- [ ] ‚úÖ Aprobado - Listo para producci√≥n
- [ ] ‚ö†Ô∏è Aprobado con observaciones - Monitorear en producci√≥n
- [ ] ‚ùå Rechazado - Requiere cambios antes de deploy

### Comentarios del Revisor
> [Observaciones generales, recomendaciones y pr√≥ximos pasos]

### Pr√≥ximas Acciones Requeridas
1. 
2. 
3. 

**Revisi√≥n completada por:** ________________
**Fecha:** ________________
**Pr√≥xima revisi√≥n programada:** ________________`
        }
    },
    recursos: {
        "Enlaces de Desarrollo": {
            icon: "üîó",
            content: `# Enlaces de Desarrollo: {titulo}

**Fecha:** {fecha}
**Categor√≠a:** 

## üõ†Ô∏è Herramientas de Desarrollo

### IDEs y Editores
- [Visual Studio Code](https://code.visualstudio.com/) - Editor principal
- [JetBrains Suite](https://www.jetbrains.com/) - IDEs especializados
- [Vim](https://www.vim.org/) - Editor de terminal

### Control de Versiones
- [Git Documentation](https://git-scm.com/docs) - Documentaci√≥n oficial
- [GitHub](https://github.com/) - Repositorios remotos
- [GitLab](https://gitlab.com/) - Alternativa con CI/CD integrado

## üìö Documentaci√≥n y Aprendizaje

### Documentaci√≥n Oficial
- [MDN Web Docs](https://developer.mozilla.org/) - Web technologies
- [React Documentation](https://reactjs.org/docs/) - React framework
- [Node.js Docs](https://nodejs.org/docs/) - Backend JavaScript

### Tutoriales y Cursos
- [freeCodeCamp](https://www.freecodecamp.org/) - Cursos gratuitos
- [Codecademy](https://www.codecademy.com/) - Cursos interactivos
- [Udemy](https://www.udemy.com/) - Cursos pagos especializados

## Notas Personales
> [Agrega tus enlaces favoritos y notas espec√≠ficas]

### Mis Favoritos
- 
- 
- 

### Para Explorar M√°s Tarde
- 
- 
- 

## üìÖ √öltima Actualizaci√≥n
**Fecha:** {fecha}
**Pr√≥xima revisi√≥n:** `
        },
        "Criterios de Progresi√≥n": {
            icon: "üéØ",
            content: `# Criterios de Progresi√≥n: {titulo}

**Programa/Curso:** 
**Fecha:** {fecha}
**Nivel actual:** 

## üéØ Niveles de Competencia

### Nivel 1: Principiante
**Objetivo:** Familiarizaci√≥n con conceptos b√°sicos

#### Conocimientos Requeridos
- [ ] Comprende conceptos fundamentales
- [ ] Conoce sintaxis b√°sica del lenguaje/herramienta
- [ ] Entiende estructuras de datos b√°sicas
- [ ] Familiarizado con terminolog√≠a esencial

#### Habilidades Pr√°cticas
- [ ] Puede escribir programas simples
- [ ] Resuelve problemas b√°sicos con ayuda
- [ ] Usa herramientas b√°sicas de desarrollo
- [ ] Sigue tutoriales paso a paso exitosamente

#### Proyectos de Validaci√≥n
- [ ] Calculadora b√°sica
- [ ] Lista de tareas simple
- [ ] P√°gina web est√°tica
- [ ] Script de automatizaci√≥n b√°sico

#### Tiempo Estimado: 2-4 semanas

---

### Nivel 2: Intermedio
**Objetivo:** Aplicaci√≥n independiente de conocimientos

#### Conocimientos Requeridos
- [ ] Comprende patrones de dise√±o b√°sicos
- [ ] Conoce mejores pr√°cticas de desarrollo
- [ ] Entiende conceptos de testing
- [ ] Familiarizado con control de versiones

#### Habilidades Pr√°cticas
- [ ] Desarrolla aplicaciones funcionales sin ayuda
- [ ] Debuggea problemas complejos
- [ ] Implementa tests unitarios b√°sicos
- [ ] Colabora efectivamente en equipos

#### Proyectos de Validaci√≥n
- [ ] API REST completa con CRUD
- [ ] Aplicaci√≥n web con base de datos
- [ ] Aplicaci√≥n m√≥vil b√°sica
- [ ] Sistema de autenticaci√≥n

#### Tiempo Estimado: 6-8 semanas

## üéØ Plan de Progresi√≥n Personal

### Estado Actual
**Nivel:** 
**Fecha de evaluaci√≥n:** 
**Evaluador:** 

### Competencias por Mejorar
1. **Competencia:** 
   **Nivel actual:** 
   **Nivel objetivo:** 
   **Timeline:** 

2. **Competencia:** 
   **Nivel actual:** 
   **Nivel objetivo:** 
   **Timeline:** 

### Recursos de Aprendizaje Recomendados
- **Cursos:** 
- **Libros:** 
- **Proyectos pr√°ticos:** 
- **Mentor√≠as:** 

## üìÖ Cronograma de Revisiones
- **Revisi√≥n inicial:** 
- **Revisi√≥n intermedia:** 
- **Revisi√≥n final:** 
- **Certificaci√≥n:** `
        }
    }
};

// Iconos unicode para carpetas
const folderIcons = {
    dde: "üìÅ", 
    planificacion: "üóÇÔ∏è", 
    docs: "üìÑ", 
    recursos: "üìù"
};

// Elementos del DOM
const folderListEl = document.getElementById('folder-list');
const fileListEl = document.getElementById('file-list');
const currentFolderEl = document.getElementById('current-folder');
const editorContainerEl = document.getElementById('editor-container');
const fileContentEl = document.getElementById('file-content');
const btnGuardar = document.getElementById('btn-guardar');
const btnCerrarEditor = document.getElementById('btn-cerrar-editor');
const btnNuevaEntrada = document.getElementById('btn-nueva-entrada');
const btnSincronizar = document.getElementById('btn-sincronizar');
const modalNuevaEntrada = document.getElementById('modal-nueva-entrada');
const formNuevaEntrada = document.getElementById('form-nueva-entrada');
const formCampos = document.getElementById('form-campos');
const btnCerrarModal = document.getElementById('btn-cerrar-modal');
const kanbanContainer = document.getElementById('kanban-container');

let carpetas = [];
let archivos = [];
let carpetaActiva = null;
let archivoActivo = null;
let esArchivoNuevo = false;

// ESTADO DEL MODAL - Variables globales para mejor control
let modalState = {
    isOpen: false,
    selectedTemplate: null,
    formVisible: false
};

// Funci√≥n para reemplazar placeholders en templates
function processTemplate(content, title) {
    const now = new Date();
    const fecha = now.toISOString().slice(0, 10);
    return content
        .replace(/{titulo}/g, title || 'Nuevo Documento')
        .replace(/{fecha}/g, fecha);
}

// Carga carpetas de primer nivel
async function cargarCarpetas() {
  carpetas = await window.api.listarCarpetas();
  folderListEl.innerHTML = '';
  carpetas.forEach(carpeta => {
    const li = document.createElement('li');
    li.innerHTML = `<span class="icon">${folderIcons[carpeta] || 'üìÅ'}</span>${carpeta}`;
    li.dataset.carpeta = carpeta;
    li.addEventListener('click', () => seleccionarCarpeta(carpeta, li));
    folderListEl.appendChild(li);
  });
}

// Selecciona carpeta y lista archivos markdown
async function seleccionarCarpeta(carpeta, liElemento) {
  carpetaActiva = carpeta;
  archivoActivo = null;
  esArchivoNuevo = false;
  currentFolderEl.textContent = carpeta;
  editorContainerEl.classList.add('hidden');
  kanbanContainer.classList.add('hidden');

  // Resaltar carpeta seleccionada
  Array.from(folderListEl.children).forEach(li => li.classList.remove('selected'));
  liElemento.classList.add('selected');

  archivos = await window.api.listarArchivos(carpeta);
  fileListEl.innerHTML = '';
  archivos.forEach(archivo => {
    const li = document.createElement('li');
    li.textContent = archivo;
    li.dataset.archivo = archivo;
    li.addEventListener('click', () => abrirArchivo(archivo, li));
    fileListEl.appendChild(li);
  });
}

// Abre archivo para editar o vista Kanban
async function abrirArchivo(archivo, liElemento) {
  archivoActivo = archivo;
  esArchivoNuevo = false;

  // Resaltar archivo seleccionado
  Array.from(fileListEl.children).forEach(li => li.classList.remove('selected'));
  liElemento.classList.add('selected');

  const contenido = await window.api.leerArchivo(carpetaActiva, archivo);

  // Detectar vista Kanban si tiene encabezados h2 espec√≠ficos
  if (esKanban(contenido)) {
    mostrarKanban(contenido);
  } else {
    mostrarEditor(contenido);
  }
}

// Muestra editor para texto plano
function mostrarEditor(contenido) {
  kanbanContainer.classList.add('hidden');
  editorContainerEl.classList.remove('hidden');
  fileContentEl.value = contenido;
  fileContentEl.focus();
}

// Detecta si el archivo contiene los encabezados Kanban
function esKanban(texto) {
  // Busca encabezados H2 "## Por hacer", "## En proceso", "## Hecho"
  const regex = /^##\s*(Por hacer|En proceso|Hecho)$/gim;
  const matches = texto.match(regex);
  return matches && matches.length >= 3;
}

// Renderiza contenido en formato Kanban interactivo
function mostrarKanban(texto) {
  editorContainerEl.classList.add('hidden');
  kanbanContainer.classList.remove('hidden');
  kanbanContainer.innerHTML = '';

  // Extraer secciones Kanban
  const secciones = {
    'Por hacer': [],
    'En proceso': [],
    'Hecho': []
  };

  // Dividir texto por l√≠neas
  const lines = texto.split('\n');
  let currentSection = null;

  lines.forEach(line => {
    const headerMatch = line.match(/^##\s*(Por hacer|En proceso|Hecho)$/i);
    if (headerMatch) {
      currentSection = headerMatch[1];
    } else if (currentSection && line.trim().startsWith('- ')) {
      secciones[currentSection].push(line.trim().slice(2));
    }
  });

  // Crear columnas Kanban
  Object.keys(secciones).forEach(colName => {
    const column = document.createElement('div');
    column.classList.add('kanban-column');
    column.dataset.status = colName;

    const title = document.createElement('h3');
    title.textContent = colName;
    column.appendChild(title);

    secciones[colName].forEach(task => {
      const item = document.createElement('div');
      item.classList.add('kanban-item');
      item.textContent = task;
      item.draggable = true;

      // Drag and drop handlers para interacci√≥n b√°sica
      item.addEventListener('dragstart', dragStart);
      item.addEventListener('dragend', dragEnd);

      column.appendChild(item);
    });

    // Columnas como drop targets
    column.addEventListener('dragover', dragOver);
    column.addEventListener('drop', drop);

    kanbanContainer.appendChild(column);
  });
}

// Variables globales para drag&drop
let draggedItem = null;
function dragStart(e) {
  draggedItem = this;
  setTimeout(() => this.style.display = 'none', 0);
}
function dragEnd(e) {
  this.style.display = 'block';
  draggedItem = null;
}
function dragOver(e) {
  e.preventDefault();
}
function drop(e) {
  e.preventDefault();
  if (draggedItem) {
    this.appendChild(draggedItem);
    guardarKanbanActual();
  }
}

// Al guardar Kanban, reconstruir markdown y guardar archivo
async function guardarKanbanActual() {
  if (!carpetaActiva || !archivoActivo) return;

  let nuevoContenido = '';

  // Reconstruir markdown Kanban
  Array.from(kanbanContainer.children).forEach(column => {
    const status = column.dataset.status;
    nuevoContenido += `## ${status}\n`;
    Array.from(column.querySelectorAll('.kanban-item')).forEach(item => {
      nuevoContenido += `- ${item.textContent}\n`;
    });
    nuevoContenido += '\n';
  });

  const exito = await window.api.guardarArchivo(carpetaActiva, archivoActivo, nuevoContenido, false);
  if (!exito) {
    alert('Error al guardar el tablero Kanban.');
  }
}

// === SISTEMA DE MODAL SIMPLIFICADO Y ESTABLE ===

function resetModalState() {
  modalState.isOpen = false;
  modalState.selectedTemplate = null;
  modalState.formVisible = false;
}

// MODAL ULTRA-SIMPLIFICADO - SIN COMPLEJIDADES
function mostrarModalNuevaEntrada() {
  if (!carpetaActiva) {
    alert('Seleccione una carpeta primero.');
    return;
  }

  console.log('üöÄ Abriendo modal para:', carpetaActiva);
  
  // LIMPIEZA SIMPLE
  resetModalState();
  modalState.isOpen = true;
  formCampos.innerHTML = '';
  
  const folderTemplates = templates[carpetaActiva] || {};
  
  // CREAR TODO DE UNA VEZ, SIN COMPLEJIDADES
  const html = `
    <div class="template-selector">
      <h4>üéØ Seleccionar Plantilla para ${carpetaActiva.toUpperCase()}</h4>
      <div class="template-grid">
        ${Object.entries(folderTemplates).map(([name, template]) => `
          <div class="template-card" data-template="${name}">
            <div class="template-icon">${template.icon}</div>
            <div class="template-name">${name}</div>
          </div>
        `).join('')}
        <div class="template-card" data-template="custom">
          <div class="template-icon">üìù</div>
          <div class="template-name">Documento Personalizado</div>
        </div>
      </div>
    </div>
    
    <div style="margin-top: 1.5rem;">
      <label for="titulo-simple">T√≠tulo del Documento:</label>
      <input 
        type="text" 
        id="titulo-simple" 
        placeholder="Selecciona una plantilla y escribe el t√≠tulo..." 
        style="
          width: 100%;
          padding: 12px;
          margin-top: 8px;
          border: 1px solid #3a3d41;
          border-radius: 6px;
          background: #1e1e1e;
          color: #d4d4d4;
          font-size: 14px;
          font-family: inherit;
        "
      >
      
      <div id="content-simple" style="display: none; margin-top: 1rem;">
        <label for="contenido-simple">Contenido:</label>
        <textarea 
          id="contenido-simple" 
          rows="4"
          placeholder="Contenido personalizado (opcional)"
          style="
            width: 100%;
            padding: 12px;
            margin-top: 8px;
            border: 1px solid #3a3d41;
            border-radius: 6px;
            background: #1e1e1e;
            color: #d4d4d4;
            font-size: 14px;
            font-family: inherit;
            resize: vertical;
          "
        ></textarea>
      </div>
      
      <div id="preview-simple" style="margin-top: 1rem;">
        <p style="color: #9ca3af; font-style: italic;">üëÜ Selecciona una plantilla arriba</p>
      </div>
    </div>
  `;
  
  formCampos.innerHTML = html;
  modalNuevaEntrada.classList.remove('hidden');
  
  // CONFIGURACI√ìN INMEDIATA Y DIRECTA - SIN DELAYS
  const cards = formCampos.querySelectorAll('.template-card');
  const input = document.getElementById('titulo-simple');
  const contentArea = document.getElementById('content-simple');
  const preview = document.getElementById('preview-simple');
  
  // CONFIGURAR EVENT LISTENERS INMEDIATAMENTE
  cards.forEach(card => {
    card.addEventListener('click', () => {
      // Limpiar selecci√≥n
      cards.forEach(c => c.classList.remove('selected'));
      card.classList.add('selected');
      
      modalState.selectedTemplate = card.dataset.template;
      
      if (modalState.selectedTemplate === 'custom') {
        contentArea.style.display = 'block';
        preview.innerHTML = '<p style="color: #9ca3af; font-style: italic;">üìù Documento personalizado</p>';
      } else {
        contentArea.style.display = 'none';
        preview.innerHTML = `<p style="color: #9ca3af; font-style: italic;">‚ú® Plantilla: <strong>${modalState.selectedTemplate}</strong></p>`;
      }
      
      // FOCUS INMEDIATO Y √öNICO
      input.placeholder = 'Escribe el t√≠tulo del documento';
      setTimeout(() => input.focus(), 0); // Un solo timeout m√≠nimo para evitar conflictos de focus
      
      console.log('‚úÖ Plantilla seleccionada:', modalState.selectedTemplate);
    });
  });
  
  // FOCUS INICIAL INMEDIATO
  input.focus();
  console.log('‚úÖ Modal configurado instant√°neamente');

}

// Crear nuevo archivo con plantilla seleccionada - VERSI√ìN ULTRA-SIMPLE
async function crearNuevaEntrada(event) {
  event.preventDefault();

  // VALIDACIONES SIMPLES
  if (!modalState.selectedTemplate) {
    alert('‚ö†Ô∏è Seleccione una plantilla primero.');
    return;
  }

  // OBTENER VALORES CON EL NUEVO ID
  const tituloInput = document.getElementById('titulo-simple');
  const titulo = tituloInput ? tituloInput.value.trim() : '';
  
  if (!titulo) {
    alert('‚ö†Ô∏è Ingrese un t√≠tulo para el documento.');
    if (tituloInput) {
      tituloInput.focus();
    }
    return;
  }

  // PROCESAR CONTENIDO
  const tituloLimpio = titulo.replace(/[<>:"/\\|?*]/g, '-');
  let contenido = '';
  let nombreArchivo = '';

  try {
    if (modalState.selectedTemplate === 'custom') {
      const contenidoInput = document.getElementById('contenido-simple');
      const contenidoTexto = contenidoInput ? contenidoInput.value.trim() : '';
      contenido = `# ${tituloLimpio}\n\n${contenidoTexto}\n`;
      nombreArchivo = `${carpetaActiva.toUpperCase()}_${new Date().toISOString().slice(0, 10)}_${tituloLimpio.replace(/\s+/g, '_')}.md`;
    } else {
      const template = templates[carpetaActiva][modalState.selectedTemplate];
      if (!template) {
        throw new Error(`Plantilla '${modalState.selectedTemplate}' no encontrada`);
      }
      contenido = processTemplate(template.content, tituloLimpio);
      nombreArchivo = `${modalState.selectedTemplate.replace(/\s+/g, '_')}_${new Date().toISOString().slice(0, 10)}_${tituloLimpio.replace(/\s+/g, '_')}.md`;
    }

    // GUARDAR
    const exito = await window.api.guardarArchivo(carpetaActiva, nombreArchivo, contenido, true);
    if (exito) {
      console.log('‚úÖ Archivo creado:', nombreArchivo);
      cerrarModal();
      cargarArchivosYPulsar(carpetaActiva, nombreArchivo);
    } else {
      throw new Error('Error al guardar archivo');
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
    alert(`‚ùå Error: ${error.message}`);
  }
}

function cerrarModal() {
  modalNuevaEntrada.classList.add('hidden');
  resetModalState();
  formCampos.innerHTML = '';
  console.log('‚úÖ Modal cerrado');
}

// Event listeners principales
btnCerrarModal.addEventListener('click', cerrarModal);
btnNuevaEntrada.addEventListener('click', mostrarModalNuevaEntrada);
formNuevaEntrada.addEventListener('submit', crearNuevaEntrada);

// CERRAR MODAL CON TECLA ESC
document.addEventListener('keydown', (event) => {
  if (event.key === 'Escape' && modalState.isOpen) {
    cerrarModal();
  }
  
  // ATAJO PARA DEVTOOLS - Ctrl+Shift+I
  if (event.ctrlKey && event.shiftKey && event.key === 'I') {
    if (window.api && window.api.openDevTools) {
      window.api.openDevTools();
    } else {
      console.log('üîß Para abrir DevTools: Men√∫ de Electron > View > Toggle Developer Tools');
    }
  }
});

// Cerrar editor
btnCerrarEditor.addEventListener('click', () => {
  editorContainerEl.classList.add('hidden');
  archivoActivo = null;
  // Deseleccionar archivo en la lista
  Array.from(fileListEl.children).forEach(li => li.classList.remove('selected'));
});

// Guardar archivo (desde editor o Kanban)
btnGuardar.addEventListener('click', async () => {
  if (!carpetaActiva) return;

  if (kanbanContainer.classList.contains('hidden')) {
    // Guardar texto plano
    const contenido = fileContentEl.value;
    const nombreArchivo = esArchivoNuevo
      ? `Entrada_${new Date().toISOString().slice(0, 10)}.md`
      : archivoActivo;

    if (!nombreArchivo) {
      alert('Seleccione o cree un archivo primero.');
      return;
    }

    const exito = await window.api.guardarArchivo(carpetaActiva, nombreArchivo, contenido, esArchivoNuevo);
    if (exito) {
      alert('Archivo guardado correctamente.');
      if (esArchivoNuevo) cargarArchivosYPulsar(carpetaActiva, nombreArchivo);
      esArchivoNuevo = false;
    } else {
      alert('Error al guardar el archivo.');
    }
  } else {
    // Guardar Kanban (se guarda autom√°ticamente en drop)
    alert('Los cambios en el tablero Kanban se guardan autom√°ticamente.');
  }
});

// Cargar archivos y abrir uno autom√°ticamente
async function cargarArchivosYPulsar(carpeta, archivo) {
  archivos = await window.api.listarArchivos(carpeta);
  fileListEl.innerHTML = '';
  archivos.forEach(f => {
    const li = document.createElement('li');
    li.textContent = f;
    li.dataset.archivo = f;
    li.addEventListener('click', () => abrirArchivo(f, li));
    if (f === archivo) li.classList.add('selected');
    fileListEl.appendChild(li);
  });
  
  // FIX: Verificar que existe el elemento antes de pasarlo a abrirArchivo
  const selectedLi = fileListEl.querySelector('li.selected');
  if (selectedLi) {
    abrirArchivo(archivo, selectedLi);
  } else {
    console.log('‚ö†Ô∏è No se encontr√≥ elemento selected, archivo creado pero no abierto');
  }
}

// Manejar bot√≥n Sincronizar
btnSincronizar.addEventListener('click', async () => {
  btnSincronizar.disabled = true;
  btnSincronizar.textContent = 'Sincronizando...';
  const resultado = await window.api.syncGit();
  if (!resultado.success) {
    alert('Error al sincronizar: ' + resultado.error);
  }
  btnSincronizar.textContent = 'Sincronizar';
  btnSincronizar.disabled = false;
});

// Al cargar la app
window.addEventListener('DOMContentLoaded', () => {
  cargarCarpetas();
  
  // FUNCI√ìN DE TEST SIMPLE
  window.testInput = function() {
    const input = document.getElementById('titulo-simple');
    if (input) {
      console.log('üß™ Test del input:');
      console.log('  - Encontrado:', !!input);
      console.log('  - Visible:', input.offsetWidth > 0);
      console.log('  - Valor actual:', input.value);
      
      input.focus();
      input.value = 'TEST ' + Date.now();
      
      console.log('  - Valor despu√©s:', input.value);
      console.log('  - Tiene focus:', document.activeElement === input);
    } else {
      console.log('‚ùå Input no encontrado');
    }
  };
  
  console.log('üß™ Funci√≥n testInput() disponible. Ejecuta testInput() en la consola para probar.');
});
